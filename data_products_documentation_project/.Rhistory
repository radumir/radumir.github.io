x<-1:4
y<-2
x+y
x<-c(4,TRUE)
x
x.class
class(x)
x<-c(3,5,1,10,12,6)
x[x<=5]<-0
x
ds<-read.csv("D:\0001.articole\000.datascience\02.Rprogramming\homework\hw1_data.csv")
ds<-read.csv("D:\\0001.articole\\000.datascience\\02.Rprogramming\\homework\\hw1_data.csv")
r12<-ds[1:2,]
r12
View(`r12`)
View(`r12`)
View(`r12`)
last2<-ds[152:153,]
last2
ds[47,1]
ozone=ds[,1]
bad=is.na(ozone)
badozone=ozone(bad)
badozone=ozone[bad]
goodozone=ozone[!bad]
mean(goodozone)
above31=ozone[x>31]
above31=ozone>31
temp=ds[,4]
above90=temp>90
above31=ozone>31 or is.na(ozone)
above31=ozone>31 || is.na(ozone)
above31=ozone>31
bad2=is.na(temp)
cond=!bad*!bad2*above31*above90
cond=!bad or above31
cond=!bad || above31
cond=!bad & above31
cond=!bad & above31 & !bad2 & above90
ds[cond,]
ds2=ds[cond,]
mean(ds2[,2])
month=ds[,5]
month6=month==6
ds[month6 & !bad2,]
mean(ds[month6 & !bad2,4])
month5=month==5
max(ds[month5,1])
max(ds[month5 & !bad,1])
dump("D:\\0001.articole\\000.datascience\\02.Rprogramming\\01\\homework\\session.txt")
x + y
}
}
add2(3,4)
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files <- list.files(directory, full.names = TRUE)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
dat <- data.frame()
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
for( fileID <- id ) {
dat <- rbind( dat, read.csv(files[fileID]) )
}
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
dat1 = dat[, dat[[pollutant]]]
mean( dat1, na.rm = TRUE)
}
files1 <- list.files('specdata', full.names=TRUE)
files1
dir
pwd
pollutantmean <- function(directory, pollutant, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files <- list.files(directory, full.names = TRUE)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
dat <- data.frame()
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
for( fileID in id ) {
dat <- rbind( dat, read.csv(files[fileID]) )
}
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
dat1 = dat[, dat[[pollutant]]]
mean( dat1, na.rm = TRUE)
}
pollutantmean('specdata','nitrate')
exit
install.packages("xslx")
install.packages("xlsx")
library(xslx)
library(xlsx)
library(xslx)
install.packages("xlsx")
library(xslx)
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
install.packages("rJava")
library(rJava)
Sys.getenv("JAVA_HOME")
Sys.setenv("JAVA_HOME","C:\\Program Files\\Java\\jdk1.7.0_71")
Sys.setenv(JAVA_HOME=C:\\Program Files\\Java\\jdk1.7.0_71")
Sys.setenv(JAVA_HOME="C:\\Program Files\\Java\\jdk1.7.0_71")
library(rJava)
n <- 10000
means <- cumsum(rnorm(n))/(1:n)
library(ggplot2)
g <- ggplot(data.frame(x=1:n,y=means), aes(x=x,y=y))
g <- g + geom_hline(yintercept=0)+geom_line(size=2)
g <- g + labs(x = "Number of obs", y="Cumulative mean")
g
?cumsum
cumsum(1:10)
g
?aes
library(UsingR)
install.pacakges(UsingR)
packages.install("UsingR")
install.packages("UsingR")
library(UsingR)
data(father.son)
x <- father.son$sheight
qnorm(0.975)
0.56 + c(-1,1)*qnorm(0.975)*sqrt(0.56*0.44/100)
binom.test(56, 100)$conf.int
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
11/12
deck
13*4
1/13
0
3/13
2/51
dice_sqr <- sqr(1:6)
dice_sqr <- 1:6 * 1:6
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5 * 3.5
ex2_high <- sum( dice_high * dice_sqr ) - 3.5 * 3.5
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3)*.8^3*.2^2
sum( apply(3:5, function(x) choose(5,x)*(.8)^x*(.2)^(5-x)) )
sum( apply(3:5, fun=function(x) choose(5,x)*(.8)^x*(.2)^(5-x)) )
?
choose(5,3)*(.8)^3*(.2)^2+choose(5,4)*(.8)^4*.2+choose(5,5)*(.8)^5
?pbinom
pbinom(2,5,.8,lower.tail=FALSE)
qnorm(.1)
0
?qnorm
qnorm(0.975,3,2)
1.96*2+3
pnorm(1200,1020,50,lower.tail=FALSE)
pnorm((1200-1020)/50,0,1,lower.tail=FALSE)
qnorm(.75,1020,50,lower.tail=TRUE)
.53
.53
ppois(3,2.5*4)
?pbinom
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(1000)
coinPlot(10000)
qnorm(.95)
no clue
???
p + c(-1,1)*qnorm(.975)+sqrt(p*(1-p)/n)
0.6 + c(-1,1)*qnorm(.975)+sqrt((.6)*(.4)/100)
0.6 + c(-1,1)*qnorm(.975)+sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)+sqrt(.6*.4/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
?mywald
mywald
mywald(.2)
ACCompar(20)
lamb = 5/94.32
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)
poisson.test(5,94.32)$conf
version()
version
install.packages("pdflatex")
update
update()
install.packages(c("boot", "class", "cluster", "codetools", "foreign", "Formula", "Hmisc", "KernSmooth", "manipulate", "MASS", "Matrix", "nlme", "nnet", "Rcpp", "rmarkdown", "RMySQL", "rpart", "spatial"))
install.packages(c("boot", "class", "cluster", "codetools", "foreign",
data(sleep)
head(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
s <- sd(difference)
n <- 10
mn + c(-1,1)*qt(.975, n-1)*s/sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
?qt
library(datasets)
data(ClickWeight)
data(ChickWeight)
library(reshape2)
swirl()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)
t.test(difference)$conf.int
sp <- 7*15.34^2+20*18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86 - 127.44 + c(-1,1)*qt(.975,ns)*sp*sqrt(1/7+1/20)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
sp <- (var(g1)*9+var(g2)*9)/(10+10-2)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
sp <- sp * sqrt(1/10+1/10)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired=FALSE,var.equal=TRUE)$conf
t.test(g2,g1,paired=TRUE)$conf
num <- (15.34^2/8+18.23^2/21)^2
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num / den
132.86-127.44+c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8+18.23^2/21)
1
2
2/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight,fs$fheight,paired=TRUE)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
pt(2.5,15,lower.tail=FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2,lower.tail=TRUE)
pnorm(2,lower.tail=FALSE)
mybin
pbinom(6,8,prob=.5,lower.tail=FALSE)
pbinom(7,8,lower.tail=TRUE)
pbinom(7,8,probl=.5,lower.tail=TRUE)
pbinom(7,8,prob=.5,lower.tail=TRUE)
ppois(9,5,lower.tail=FALSE)
mn <- 1100
sd1 <- 30
mn + c(-1,1)*q(.95,8)*(sd1/sqrt(9))
tq(.95,8)
q(.95,8)
?tq
?qt
1100 + c(-1,1)*qt(.95,8)*10
1100 + c(-1,1)*qt(.95,8)*0.1
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot(2)
myplot2(2)
qt(.975,2)
myplot2(20)
md = 1100
exit
0
exit()
quit()
install.packages('devtools')
library(datasets)
str(mtcars)
mtcars?
q
?mtcars
amfit <- lm( mpg ~ am , mtcars)
summary(amfit)$coeff
amfit <- lm( mpg ~ am - 1, mtcars)
summary(amfit)$coeff
amfit <- lm( mpg ~ factor(am), mtcars)
summary(amfit)$coeff
fit2 <- lm( mpg ~ ., mtcars)
vif(fit2)
?vif
??vif
car::vif(fit2)
?mtcars
amfit2 <- lm( mpg ~ factor(am) + wt)
amfit2 <- lm( mpg ~ factor(am) + wt, mtcars)
anova(amfit,amfit2)
summary(amfit2)$coeff
amfit3 <- lm(mpg ~ factor(am) + wt + cyl, mtcars)
anova(amfit,amfit2,amfit3)
summary(amfit3)$coeff
amfit11 <- lm(mpg ~ factor(am) + disp, mtcars)
summary(amfit11)$coeff
anova(amfit,amfit11)
amfit12 <- lm(mpg ~ factor(am) + disp + wt, mtcars)
summary(amfit12)$coeff
anova(amfit,amfit11,amfit12)
amfit13 <- lm(mpg ~ factor(am) + disp + factor(cyl), mtcars)
anova(amfit,amfit11,amfit13)
car::vif(mtcars)
car::vif(amfit)
car::vif(fit2)
amfit14 <- lm(mpg ~ factor(am) + disp + hp, mtcars)
anova(amfit,amfit11,amfit14)
summary(amfit14)$coeff
amfit15 <- lm(mpg ~ factor(am) + disp + gear, mtcars)
anova(amfit,amfit11,amfit15)
amfit16 <- lm(mpg ~ factor(am) + disp + carb, mtcars)
anova(amfit,amfit11,amfit16)
summary(amfit16)$coeff
amfit17 <- lm(mpg ~ factor(am) + disp + drat, mtcars)
anova(amfit,amfit11,amfit17)
amfit18 <- lm(mpg ~ factor(am) + disp + qsec, mtcars)
anova(amfit,amfit11,amfit18)
amfit18 <- lm(mpg ~ factor(am) + disp + vs, mtcars)
anova(amfit,amfit11,amfit18)
summary(mtcars)
names(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
summary(amfitDispCarb)$coeff
summary(amfit)$coeff
amfitDispCarbHp <- lm(mpg ~ factor(am) + disp + carb + hp, mtcars)
anova(amfit,amfitDisp,amfitDispCarb,amfitDispCarbHp)
amfitDispCarbHp <- lm(mpg ~ factor(am) + disp + carb + wt, mtcars)
anova(amfit,amfitDisp,amfitDispCarb,amfitDispCarbHp)
?mtcars
summary(amfitDispCarb)$coeff
install.packages("shiny")
library(shiny)
version
publish_github('radumir','DataProductsDocumentationProject')
library('devtools')
publish_github('radumir','DataProductsDocumentationProject')
library('slidify')
publish_github('radumir','DataProductsDocumentationProject')
setwd("D:/0001.articole/000.datascience/08.DevelopingDataProducts/DocumentationProject")
publish_github('radumir','DataProductsDocumentationProject')
setwd("D:/0001.articole/000.datascience/08.DevelopingDataProducts/DocumentationProject/data_products_documentation_project")
slidify("index.Rmd")
publish_github('radumir','DataProductsDocumentationProject')
git config user.email 'radumirescu4@gmail.com'
publish_github('radumirescu4@gmail.com','DataProductsDocumentationProject')
publish_github('radumirescu4@gmail.com','DataProductsDocumentationProject')
